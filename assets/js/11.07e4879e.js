(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{270:function(t,s,n){"use strict";n.r(s);var a=n(38),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"query-binding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#query-binding","aria-hidden":"true"}},[t._v("#")]),t._v(" Query binding")]),t._v(" "),n("p",[t._v("The binding system lies at the heart of all sqlbunny queries. It is in charge of converting SQL rows into Go structs.")]),t._v(" "),n("p",[t._v("It matches SQL columns to Go struct fields, and copies their values over.")]),t._v(" "),n("p",[t._v("Binding behavior is controlled by the "),n("code",[t._v("bunny")]),t._v(" struct tag.")]),t._v(" "),n("h2",{attrs:{id:"field-binds"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#field-binds","aria-hidden":"true"}},[t._v("#")]),t._v(" Field binds")]),t._v(" "),n("p",[t._v("To bind a field to an SQL column, specify its SQL column name in the "),n("code",[t._v("bunny")]),t._v(" tag. Fields without a "),n("code",[t._v("bunny")]),t._v(" tag are never bound.")]),t._v(" "),n("p",[t._v("SQL-to-Go conversion is done using the same rules as "),n("a",{attrs:{href:"https://golang.org/pkg/database/sql/#Rows.Scan",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("sql.Rows.Scan()")]),n("OutboundLink")],1),t._v(". In a nutshell, it means destination types should be either supported directly by the SQL driver, or implement "),n("a",{attrs:{href:"https://golang.org/pkg/database/sql/#Scanner",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("sql.Scanner")]),n("OutboundLink")],1),t._v(".")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" MyStruct "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Foo     "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"foo"`')]),t._v("\n    Bar     "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"bar"`')]),t._v("\n    Ignored "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v MyStruct\nerr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queries"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Raw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"SELECT 1 AS foo, 'fun' AS bar, 'hello' AS ignored\"")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// v contains foo=1, bar="fun", and ignored=""')]),t._v("\n")])])]),n("h2",{attrs:{id:"recursive-binds"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recursive-binds","aria-hidden":"true"}},[t._v("#")]),t._v(" Recursive binds")]),t._v(" "),n("p",[t._v('If the ",bind" option is specified on a field of struct type, binding will recurse into it\nto look for fields for binding. "name" is added as a prefix to the SQL column names\nof the inner fields.')]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Bar "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    One "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"one"`')]),t._v("\n    Two "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"two"`')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" MyStruct "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Foo     "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"foo"`')]),t._v("\n    Bar     Bar "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"bar__,bind"`')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v MyStruct\nerr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queries"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Raw")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT 1 AS foo, 2 AS bar__one, 3 as bar__two"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("v"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// v contains foo=1, bar={ one=2, two=3 }")]),t._v("\n")])])]),n("h2",{attrs:{id:"aggregating"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#aggregating","aria-hidden":"true"}},[t._v("#")]),t._v(" Aggregating")]),t._v(" "),n("p",[t._v("Bind to a custom struct to read the results of an aggregation.")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" BooksByYear "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Year  "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"year"`')]),t._v("\n    Count "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"count"`')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" years "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("BooksByYear\n\nerr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" models"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Books")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    qm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"year"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"count(*) AS count"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    qm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("GroupBy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"year"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    qm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("OrderBy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"year ASC"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("years"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"joining"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#joining","aria-hidden":"true"}},[t._v("#")]),t._v(" Joining")]),t._v(" "),n("p",[t._v('Binding to a custom "join struct" can be handy for receiving the results of a join.')]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" BookAndAuthor "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    models"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Author "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"author.,bind"`')]),t._v("\n    models"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Book   "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"book.,bind"`')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("BookAndAuthor\n\nerr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" models"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Authors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    qm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"author.id"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"author.name"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"book.id"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"book.author_id"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"book.title"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"book.year"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    qm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("InnerJoin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"book ON book.author_id = author.id"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("res"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This wil execute the following query:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SELECT ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     "author"."id" as "author.id", "author"."name" as "author.name",')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     "book"."id" as "book.id", "book"."author_id" as "book.author_id", "book"."title" as "book.title", "book"."year" as "book.year"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// FROM "author"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// INNER JOIN book ON book.author_id = author.id;")]),t._v("\n")])])]),n("h2",{attrs:{id:"extending-models"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#extending-models","aria-hidden":"true"}},[t._v("#")]),t._v(" Extending models")]),t._v(" "),n("p",[t._v('Recursive binding with empty prefix can be used to "extend" a model query with an extra computed column.')]),t._v(" "),n("p",[t._v("You simply define your own struct extending "),n("code",[t._v("Author")]),t._v(", and bind to it. Since "),n("code",[t._v("Author")]),t._v(" is recursively bound with empty prefix, all the "),n("code",[t._v("Author")])]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" AuthorWithCount "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    models"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Author "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:",bind"`')]),t._v("\n    BookCount     "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`bunny:"book_count"`')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" authors "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("AuthorWithCount\n\nerr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" models"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Authors")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    qm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"(SELECT COUNT(*) FROM book WHERE book.author_id = author.id) AS book_count"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("authors"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("This gives us all the authors with their respective book counts!")])])},[],!1,null,null,null);s.default=e.exports}}]);